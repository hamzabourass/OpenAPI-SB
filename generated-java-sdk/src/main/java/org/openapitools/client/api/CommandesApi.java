/*
 * My API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CommandesGet200ResponseInner;
import org.openapitools.client.model.CommandesPostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommandesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CommandesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommandesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for commandesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commandesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commandes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commandesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return commandesGetCall(_callback);

    }

    /**
     * Get a list of commands
     * Retrieve information about commandes.
     * @return List&lt;CommandesGet200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public List<CommandesGet200ResponseInner> commandesGet() throws ApiException {
        ApiResponse<List<CommandesGet200ResponseInner>> localVarResp = commandesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get a list of commands
     * Retrieve information about commandes.
     * @return ApiResponse&lt;List&lt;CommandesGet200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CommandesGet200ResponseInner>> commandesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = commandesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<CommandesGet200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of commands (asynchronously)
     * Retrieve information about commandes.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commandesGetAsync(final ApiCallback<List<CommandesGet200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = commandesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<CommandesGet200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for commandesIdDelete
     * @param id ID of the command (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Command deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commandesIdDeleteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commandes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commandesIdDeleteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling commandesIdDelete(Async)");
        }

        return commandesIdDeleteCall(id, _callback);

    }

    /**
     * Delete command by ID
     * Remove a specific command.
     * @param id ID of the command (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Command deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public void commandesIdDelete(Long id) throws ApiException {
        commandesIdDeleteWithHttpInfo(id);
    }

    /**
     * Delete command by ID
     * Remove a specific command.
     * @param id ID of the command (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Command deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> commandesIdDeleteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = commandesIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete command by ID (asynchronously)
     * Remove a specific command.
     * @param id ID of the command (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Command deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commandesIdDeleteAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = commandesIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for commandesIdGet
     * @param id ID of the command (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commandesIdGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commandes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commandesIdGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling commandesIdGet(Async)");
        }

        return commandesIdGetCall(id, _callback);

    }

    /**
     * Get command by ID
     * Retrieve information about a specific command.
     * @param id ID of the command (required)
     * @return CommandesGet200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public CommandesGet200ResponseInner commandesIdGet(Long id) throws ApiException {
        ApiResponse<CommandesGet200ResponseInner> localVarResp = commandesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get command by ID
     * Retrieve information about a specific command.
     * @param id ID of the command (required)
     * @return ApiResponse&lt;CommandesGet200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommandesGet200ResponseInner> commandesIdGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = commandesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CommandesGet200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get command by ID (asynchronously)
     * Retrieve information about a specific command.
     * @param id ID of the command (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commandesIdGetAsync(Long id, final ApiCallback<CommandesGet200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = commandesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CommandesGet200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for commandesIdPut
     * @param id ID of the command (required)
     * @param commandesPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, invalid input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commandesIdPutCall(Long id, CommandesPostRequest commandesPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commandesPostRequest;

        // create path and map variables
        String localVarPath = "/commandes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commandesIdPutValidateBeforeCall(Long id, CommandesPostRequest commandesPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling commandesIdPut(Async)");
        }

        // verify the required parameter 'commandesPostRequest' is set
        if (commandesPostRequest == null) {
            throw new ApiException("Missing the required parameter 'commandesPostRequest' when calling commandesIdPut(Async)");
        }

        return commandesIdPutCall(id, commandesPostRequest, _callback);

    }

    /**
     * Update command by ID
     * Update information about a specific command.
     * @param id ID of the command (required)
     * @param commandesPostRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, invalid input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public void commandesIdPut(Long id, CommandesPostRequest commandesPostRequest) throws ApiException {
        commandesIdPutWithHttpInfo(id, commandesPostRequest);
    }

    /**
     * Update command by ID
     * Update information about a specific command.
     * @param id ID of the command (required)
     * @param commandesPostRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, invalid input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> commandesIdPutWithHttpInfo(Long id, CommandesPostRequest commandesPostRequest) throws ApiException {
        okhttp3.Call localVarCall = commandesIdPutValidateBeforeCall(id, commandesPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update command by ID (asynchronously)
     * Update information about a specific command.
     * @param id ID of the command (required)
     * @param commandesPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, invalid input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commandesIdPutAsync(Long id, CommandesPostRequest commandesPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = commandesIdPutValidateBeforeCall(id, commandesPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for commandesPost
     * @param commandesPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commandesPostCall(CommandesPostRequest commandesPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commandesPostRequest;

        // create path and map variables
        String localVarPath = "/commandes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commandesPostValidateBeforeCall(CommandesPostRequest commandesPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commandesPostRequest' is set
        if (commandesPostRequest == null) {
            throw new ApiException("Missing the required parameter 'commandesPostRequest' when calling commandesPost(Async)");
        }

        return commandesPostCall(commandesPostRequest, _callback);

    }

    /**
     * Create a new command
     * Add a new command to the list.
     * @param commandesPostRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, invalid input </td><td>  -  </td></tr>
     </table>
     */
    public void commandesPost(CommandesPostRequest commandesPostRequest) throws ApiException {
        commandesPostWithHttpInfo(commandesPostRequest);
    }

    /**
     * Create a new command
     * Add a new command to the list.
     * @param commandesPostRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> commandesPostWithHttpInfo(CommandesPostRequest commandesPostRequest) throws ApiException {
        okhttp3.Call localVarCall = commandesPostValidateBeforeCall(commandesPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new command (asynchronously)
     * Add a new command to the list.
     * @param commandesPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commandesPostAsync(CommandesPostRequest commandesPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = commandesPostValidateBeforeCall(commandesPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
